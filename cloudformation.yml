AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "former2"
Description: ""
Parameters:
  OpenaiApiKey: 
    Type: String
  VapidPrivateKey:
    Type: String
  WithingsClientId:
    Type: String
  WithingsSecret:
    Type: String
  OuraAccessToken:
    Type: String
  PersonalSecret:
    Type: String

Resources:
    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "cf-templates-mgcse2n3wh2x-${AWS::Region}"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: false
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket2:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "open-fit-companion"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            LifecycleConfiguration: 
                Rules: 
                  - 
                    Id: "DeleteAfterXMins"
                    Status: "Enabled"
                    ExpirationInDays: 1
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: true
                BlockPublicPolicy: true
                IgnorePublicAcls: true
                RestrictPublicBuckets: true

    S3Bucket3:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "${S3Bucket2}-front"
            BucketEncryption: 
                ServerSideEncryptionConfiguration: 
                  - 
                    ServerSideEncryptionByDefault: 
                        SSEAlgorithm: "AES256"
                    BucketKeyEnabled: true
            OwnershipControls: 
                Rules: 
                  - 
                    ObjectOwnership: "BucketOwnerEnforced"
            PublicAccessBlockConfiguration: 
                BlockPublicAcls: false
                BlockPublicPolicy: false
                IgnorePublicAcls: false
                RestrictPublicBuckets: false

    S3BucketPolicy:
        Type: "AWS::S3::BucketPolicy"
        Properties:
            Bucket: !Sub "${S3Bucket2}-front"
            PolicyDocument: 
                Version: "2012-10-17"
                Statement: 
                  - 
                    Sid: "Statement1"
                    Effect: "Allow"
                    Principal: "*"
                    Action: "s3:GetObject"
                    Resource: !Sub "arn:aws:s3:::${S3Bucket2}-front/*"

    LambdaFunction:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            FunctionName: "ouraSubscriptionHandler"
            Handler: "index.handler"
            Architectures: 
              - "arm64"
            Code: 
                ZipFile: >
                    def handler(event, context):
                        return event
            MemorySize: 128
            Role: !GetAtt IAMRole9.Arn
            Runtime: "nodejs20.x"
            Timeout: 10
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction2:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    WITHINGS_CLIENT_ID: !Ref WithingsClientId
                    WITHINGS_SECRET: !Ref WithingsSecret
            FunctionName: "requestTokens"
            Handler: "index.handler"
            Architectures: 
              - "x86_64"
            Code: 
                ZipFile: >
                    def handler(event, context):
                        return event
            MemorySize: 128
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${DynamoDBTable3}_requester"
            Runtime: "nodejs20.x"
            Timeout: 20
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction3:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    OPENAI_API_KEY: !Ref OpenaiApiKey
                    PERSONAL_SECRET: !Ref PersonalSecret
            FunctionName: !Sub "openFitCompanionApi${IAMPolicy3}"
            Handler: "index.handler"
            Architectures: 
              - "arm64"
            Code: 
                ZipFile: >
                    def handler(event, context):
                        return event
            MemorySize: 128
            Role: !GetAtt IAMRole5.Arn
            Runtime: "nodejs20.x"
            Timeout: 240
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:depend:4"
            EphemeralStorage: 
                Size: 512

    LambdaFunction4:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    WITHINGS_CLIENT_ID: !Ref WithingsClientId
                    OURA_ACCESS_TOKEN: !Ref OuraAccessToken
                    WITHINGS_SECRET: !Ref WithingsSecret
            FunctionName: !GetAtt SNSTopic.TopicName
            Handler: "index.handler"
            Architectures: 
              - "x86_64"
            Code: 
                ZipFile: >
                    def handler(event, context):
                        return event
            MemorySize: 128
            Role: !GetAtt IAMRole13.Arn
            Runtime: "nodejs20.x"
            Timeout: 15
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction5:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    WITHINGS_CLIENT_ID: !Ref WithingsClientId
                    WITHINGS_SECRET: !Ref WithingsSecret
            FunctionName: "test"
            Handler: "index.handler"
            Architectures: 
              - "x86_64"
            Code: 
                ZipFile: >
                    def handler(event, context):
                        return event
            MemorySize: 128
            Role: !GetAtt IAMRole9.Arn
            Runtime: "nodejs20.x"
            Timeout: 5
            TracingConfig: 
                Mode: "PassThrough"
            EphemeralStorage: 
                Size: 512

    LambdaFunction6:
        Type: "AWS::Lambda::Function"
        Properties:
            Description: ""
            Environment: 
                Variables: 
                    WITHINGS_CLIENT_ID: !Ref WithingsClientId
                    OURA_ACCESS_TOKEN: !Ref OuraAccessToken
                    OPENAI_API_KEY: !Ref OpenaiApiKey
                    VAPID_PRIVATE_KEY: !Ref VapidPrivateKey
                    WITHINGS_SECRET: !Ref WithingsSecret
            FunctionName: "handle_daily_report"
            Handler: "index.handler"
            Architectures: 
              - "arm64"
            Code: 
                ZipFile: >
                    def handler(event, context):
                        return event
            MemorySize: 128
            Role: !GetAtt IAMRole14.Arn
            Runtime: "nodejs20.x"
            Timeout: 10
            TracingConfig: 
                Mode: "PassThrough"
            Layers: 
              - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:depend:4"
            EphemeralStorage: 
                Size: 512

    LambdaPermission:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunctionUrl"
            FunctionName: !GetAtt LambdaFunction5.Arn
            Principal: "*"

    LambdaPermission2:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunctionUrl"
            FunctionName: !GetAtt LambdaFunction2.Arn
            Principal: "*"

    LambdaPermission3:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunctionUrl"
            FunctionName: !GetAtt LambdaFunction3.Arn
            Principal: "*"

    LambdaPermission4:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunctionUrl"
            FunctionName: !GetAtt LambdaFunction.Arn
            Principal: "*"

    LambdaPermission5:
        Type: "AWS::Lambda::Permission"
        Properties:
            Action: "lambda:InvokeFunction"
            FunctionName: !GetAtt LambdaFunction4.Arn
            Principal: "sns.amazonaws.com"
            SourceArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${LambdaFunction4}"

    LambdaLayerVersion:
        Type: "AWS::Lambda::LayerVersion"
        Properties:
            Description: ""
            CompatibleRuntimes: 
              - "nodejs20.x"
            LayerName: "depend"
            Content: 
                S3Bucket: "prod-04-2014-layers"
                S3Key: !Sub "/snapshots/${AWS::AccountId}/depend-1e3ca750-7911-413b-ab23-506f8eabb027"

    LambdaUrl:
        Type: "AWS::Lambda::Url"
        Properties:
            TargetFunctionArn: !GetAtt LambdaFunction3.Arn
            AuthType: "NONE"
            Cors: 
                AllowCredentials: true
                AllowHeaders: 
                  - "authorization"
                AllowMethods: 
                  - "*"
                AllowOrigins: 
                  - "*"

    LambdaUrl2:
        Type: "AWS::Lambda::Url"
        Properties:
            TargetFunctionArn: !GetAtt LambdaFunction2.Arn
            AuthType: "NONE"
            Cors: 
                AllowCredentials: false
                AllowOrigins: 
                  - "*"

    LambdaUrl3:
        Type: "AWS::Lambda::Url"
        Properties:
            TargetFunctionArn: !GetAtt LambdaFunction5.Arn
            AuthType: "NONE"
            Cors: 
                AllowCredentials: false
                AllowOrigins: 
                  - "*"

    LambdaUrl4:
        Type: "AWS::Lambda::Url"
        Properties:
            TargetFunctionArn: !GetAtt LambdaFunction.Arn
            AuthType: "NONE"

    DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "Date"
                AttributeType: "S"
              - 
                AttributeName: "Type"
                AttributeType: "S"
            TableName: "HealthData"
            KeySchema: 
              - 
                AttributeName: "Type"
                KeyType: "HASH"
              - 
                AttributeName: "Date"
                KeyType: "RANGE"
            ProvisionedThroughput: 
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    DynamoDBTable2:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "Type"
                AttributeType: "S"
              - 
                AttributeName: "UserID"
                AttributeType: "N"
            TableName: "UserData"
            KeySchema: 
              - 
                AttributeName: "UserID"
                KeyType: "HASH"
              - 
                AttributeName: "Type"
                KeyType: "RANGE"
            ProvisionedThroughput: 
                ReadCapacityUnits: 1
                WriteCapacityUnits: 1

    DynamoDBTable3:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "TokenType"
                AttributeType: "S"
            TableName: "tokens"
            KeySchema: 
              - 
                AttributeName: "TokenType"
                KeyType: "HASH"
            ProvisionedThroughput: 
                ReadCapacityUnits: 2
                WriteCapacityUnits: 2

    SNSTopic:
        Type: "AWS::SNS::Topic"
        Properties:
            DisplayName: ""
            TopicName: "processNotification"

    SNSTopicPolicy:
        Type: "AWS::SNS::TopicPolicy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2008-10-17\",\"Id\":\"__${IAMPolicy}_policy_ID\",\"Statement\":[{\"Sid\":\"__${IAMPolicy}_statement_ID\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"*\"},\"Action\":[\"SNS:Publish\",\"SNS:RemovePermission\",\"SNS:SetTopicAttributes\",\"SNS:DeleteTopic\",\"SNS:ListSubscriptionsByTopic\",\"SNS:GetTopicAttributes\",\"SNS:AddPermission\",\"SNS:Subscribe\"],\"Resource\":\"arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${LambdaFunction4}\",\"Condition\":{\"StringEquals\":{\"AWS:SourceOwner\":\"${AWS::AccountId}\"}}}]}"
            Topics: 
              - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${LambdaFunction4}"

    SNSSubscription:
        Type: "AWS::SNS::Subscription"
        Properties:
            TopicArn: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${LambdaFunction4}"
            Endpoint: !GetAtt LambdaFunction4.Arn
            Protocol: "lambda"
            Region: !Ref AWS::Region
            RedrivePolicy: !Sub "{\"deadLetterTargetArn\":\"${SQSQueue}\"}"

    AmplifyApp:
        Type: "AWS::Amplify::App"
        Properties:
            Name: "openFitCompanion"
            EnvironmentVariables: 
              - 
                Name: "_CUSTOM_IMAGE"
                Value: "amplify:al2"
            CustomRules: 
              - 
                Source: "https://openfitcompanion.xyz/<*>"
                Target: "/index.html"
                Status: "200"
              - 
                Source: "</^[^.]+$|\\.(?!(css|gif|ico|jpg|js|png|txt|svg|woff|woff2|ttf|map|json|webp)$)([^.]+$)/>"
                Target: "/index.html"
                Status: "200"
            EnableBranchAutoDeletion: false
            AccessToken: "REPLACEME"
            OauthToken: "REPLACEME"
            CustomHeaders: ""

    AmplifyBranch:
        Type: "AWS::Amplify::Branch"
        Properties:
            BranchName: "prod"
            Stage: "PRODUCTION"
            AppId: "d166bkqiyqp079"
            EnablePullRequestPreview: false
            EnableAutoBuild: true
            EnablePerformanceMode: false

    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "Amazon_EventBridge_Scheduler_LAMBDA_65d524d34d"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"scheduler.amazonaws.com\"},\"Action\":\"sts:AssumeRole\",\"Condition\":{\"StringEquals\":{\"aws:SourceAccount\":\"${AWS::AccountId}\"}}}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy2

    IAMRole2:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "cdk-hnb659fds-cfn-exec-role-${AWS::AccountId}-${AWS::Region}"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"cloudformation.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AdministratorAccess"
            Description: ""

    IAMRole3:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "cdk-hnb659fds-deploy-role-${AWS::AccountId}-${AWS::Region}"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags: 
              - 
                Key: "aws-cdk:bootstrap-role"
                Value: "deploy"

    IAMRole4:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "cdk-hnb659fds-file-publishing-role-${AWS::AccountId}-${AWS::Region}"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags: 
              - 
                Key: "aws-cdk:bootstrap-role"
                Value: "file-publishing"

    IAMRole5:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "endpoint"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Description: ""

    IAMRole6:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "Former2"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"sts:AssumeRole\",\"Condition\":{}}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/ReadOnlyAccess"
            Description: ""

    IAMRole7:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "cdk-hnb659fds-image-publishing-role-${AWS::AccountId}-${AWS::Region}"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: ""
            Tags: 
              - 
                Key: "aws-cdk:bootstrap-role"
                Value: "image-publishing"

    IAMRole8:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "cdk-hnb659fds-lookup-role-${AWS::AccountId}-${AWS::Region}"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/ReadOnlyAccess"
            Description: ""
            Tags: 
              - 
                Key: "aws-cdk:bootstrap-role"
                Value: "lookup"

    IAMRole9:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "handle-notification"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Description: "Allows Lambda functions to call AWS services on your behalf."

    IAMRole10:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction3}-role-k543qec0"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy4

    IAMRole11:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "handleNotification-role-6g8q552z"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy

    IAMRole12:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "SNSFailureFee${IAMPolicy11}ack"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"sns.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: "Provides write access to AWS Services and Resources"

    IAMRole13:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "NotificationProcess"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Description: ""

    IAMRole14:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: "Report"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Description: "Allows Lambda functions to call AWS services on your behalf."

    IAMRole15:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "${IAMRole12}_1705069068762"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"sns.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: "Provides write access to AWS Services and Resources"

    IAMRole16:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "${IAMRole19}_1705069068762"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"sns.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: "Provides write access to AWS Services and Resources"

    IAMRole17:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "${DynamoDBTable3}_requester"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
            Description: "Allows Lambda functions to call AWS services on your behalf."

    IAMRole18:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "${LambdaFunction5}-role-31bt9ucn"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy6

    IAMRole19:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            RoleName: !Sub "SNSSuccessFee${IAMPolicy11}ack"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"sns.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            Description: "Provides write access to AWS Services and Resources"

    IAMServiceLinkedRole:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: !Sub "replication.dynamo${IAMPolicy11}.amazonaws.com"

    IAMServiceLinkedRole2:
        Type: "AWS::IAM::ServiceLinkedRole"
        Properties:
            AWSServiceName: "sso.amazonaws.com"
            Description: "Service-linked role used by AWS SSO to manage AWS resources, including IAM roles, policies and SAML IdP on your behalf."

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-519d3375-9cd3-4a7d-b362-cfa45ce4fed0"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/handleNotification:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy2:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "Amazon-EventBridge-Scheduler-Execution-Policy-b7f17d87-c3ff-40f3-aed2-5650f3929312"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction"
                            ],
                            "Resource": [
                                "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction6}:*",
                                "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaFunction6}"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy3:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-f23c4f31-3a9b-4042-9552-ae90cc81988f"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction4}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy4:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "AWSLambdaBasicExecutionRole-83d398bc-085b-4c22-b98e-cae8${IAMPolicy11}d7f19e"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction3}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy5:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-685c4795-b244-422e-9e96-19afab2852ef"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction}:*"
                            ]
                        }
                    ]
                }

    IAMManagedPolicy6:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-90cf149a-9006-483c-b6cf-7a91f29a4a83"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${LambdaFunction5}:*"
                            ]
                        }
                    ]
                }

    IAMPolicy:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"cloudformation:CreateChangeSet\",\"cloudformation:DeleteChangeSet\",\"cloudformation:DescribeChangeSet\",\"cloudformation:DescribeStacks\",\"cloudformation:ExecuteChangeSet\",\"cloudformation:CreateStack\",\"cloudformation:UpdateStack\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"CloudFormationPermissions\"},{\"Condition\":{\"StringNotEquals\":{\"s3:ResourceAccount\":\"${AWS::AccountId}\"}},\"Action\":[\"s3:GetObject*\",\"s3:GetBucket*\",\"s3:List*\",\"s3:Abort*\",\"s3:DeleteObject*\",\"s3:PutObject*\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"PipelineCrossAccountArtifactsBucket\"},{\"Condition\":{\"StringEquals\":{\"kms:ViaService\":\"s3.${AWS::Region}.amazonaws.com\"}},\"Action\":[\"kms:Decrypt\",\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey*\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"PipelineCrossAccountArtifactsKey\"},{\"Action\":\"iam:PassRole\",\"Resource\":\"arn:aws:iam::${AWS::AccountId}:role/${IAMRole2}\",\"Effect\":\"Allow\"},{\"Action\":[\"cloudformation:DescribeStackEvents\",\"cloudformation:GetTemplate\",\"cloudformation:DeleteStack\",\"cloudformation:UpdateTerminationProtection\",\"sts:GetCallerIdentity\",\"cloudformation:GetTemplateSummary\"],\"Resource\":\"*\",\"Effect\":\"Allow\",\"Sid\":\"CliPermissions\"},{\"Action\":[\"s3:GetObject*\",\"s3:GetBucket*\",\"s3:List*\"],\"Resource\":[\"arn:aws:s3:::cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}\",\"arn:aws:s3:::cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/*\"],\"Effect\":\"Allow\",\"Sid\":\"CliStagingBucket\"},{\"Action\":[\"ssm:GetParameter\"],\"Resource\":[\"arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/cdk-bootstrap/hnb659fds/version\"],\"Effect\":\"Allow\",\"Sid\":\"ReadVersion\"}]}"
            Roles: 
              - !Ref IAMRole3
            PolicyName: "default"

    IAMPolicy2:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"s3:GetObject*\",\"s3:GetBucket*\",\"s3:GetEncryptionConfiguration\",\"s3:List*\",\"s3:DeleteObject*\",\"s3:PutObject*\",\"s3:Abort*\"],\"Resource\":[\"arn:aws:s3:::cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}\",\"arn:aws:s3:::cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}/*\"],\"Effect\":\"Allow\"},{\"Action\":[\"kms:Decrypt\",\"kms:DescribeKey\",\"kms:Encrypt\",\"kms:ReEncrypt*\",\"kms:GenerateDataKey*\"],\"Resource\":\"arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/6eaa6161-c43d-46b0-810e-4a337bbaf9c6\",\"Effect\":\"Allow\"}]}"
            Roles: 
              - !Ref IAMRole4
            PolicyName: !Sub "cdk-hnb659fds-file-publishing-role-${IAMPolicy}-policy-${AWS::AccountId}-${AWS::Region}"

    IAMPolicy3:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": [
                				"dynamo${IAMPolicy11}:PutItem",
                				"dynamo${IAMPolicy11}:GetItem"
                			],
                			"Resource": [
                				"arn:aws:dynamo${IAMPolicy11}:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable2}",
                				"arn:aws:dynamo${IAMPolicy11}:${AWS::Region}:${AWS::AccountId}:table/PushSubscription",
                				"arn:aws:dynamo${IAMPolicy11}:${AWS::Region}:${AWS::AccountId}:table/Goals"
                			]
                		},
                		{
                			"Sid": "VisualEditor1",
                			"Effect": "Allow",
                			"Action": [
                				"s3:PutObject",
                				"s3:GetObject",
                				"dynamo${IAMPolicy11}:PutItem",
                				"dynamo${IAMPolicy11}:GetItem",
                				"dynamo${IAMPolicy11}:Scan",
                				"dynamo${IAMPolicy11}:Query"
                			],
                			"Resource": [
                				"arn:aws:dynamo${IAMPolicy11}:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}",
                				"arn:aws:s3:::${S3Bucket2}/*"
                			]
                		}
                	]
                }
            Roles: 
              - !Ref IAMRole5
            PolicyName: "Endpoint"

    IAMPolicy4:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"ecr:PutImage\",\"ecr:InitiateLayerUpload\",\"ecr:UploadLayerPart\",\"ecr:CompleteLayerUpload\",\"ecr:BatchCheckLayerAvailability\",\"ecr:DescribeRepositories\",\"ecr:DescribeImages\",\"ecr:BatchGetImage\",\"ecr:GetDownloadUrlForLayer\"],\"Resource\":\"arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/cdk-hnb659fds-container-assets-${AWS::AccountId}-${AWS::Region}\",\"Effect\":\"Allow\"},{\"Action\":[\"ecr:GetAuthorizationToken\"],\"Resource\":\"*\",\"Effect\":\"Allow\"}]}"
            Roles: 
              - !Ref IAMRole7
            PolicyName: !Sub "cdk-hnb659fds-image-publishing-role-${IAMPolicy}-policy-${AWS::AccountId}-${AWS::Region}"

    IAMPolicy5:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": "sns:Publish",
                			"Resource": "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${LambdaFunction4}"
                		}
                	]
                }
            Roles: 
              - !Ref IAMRole9
            PolicyName: "publishToProcessingSns"

    IAMPolicy6:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"kms:Decrypt\"],\"Resource\":\"*\",\"Effect\":\"Deny\",\"Sid\":\"DontReadSecrets\"}]}"
            Roles: 
              - !Ref IAMRole8
            PolicyName: "LookupRolePolicy"

    IAMPolicy7:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"logs:PutMetricFilter\",\"logs:PutRetentionPolicy\"],\"Resource\":[\"*\"]}]}"
            Roles: 
              - !Ref IAMRole12
            PolicyName: !Sub "${IAMRole12}_1701362330952"

    IAMPolicy8:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": [
                				"dynamo${IAMPolicy11}:PutItem",
                				"dynamo${IAMPolicy11}:GetItem"
                			],
                			"Resource": "arn:aws:dynamo${IAMPolicy11}:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}"
                		}
                	]
                }
            Roles: 
              - !Ref IAMRole13
            PolicyName: !Sub "${DynamoDBTable}RW"

    IAMPolicy9:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": [
                				"dynamo${IAMPolicy11}:PutItem",
                				"dynamo${IAMPolicy11}:GetItem"
                			],
                			"Resource": "arn:aws:dynamo${IAMPolicy11}:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable3}"
                		}
                	]
                }
            Roles: 
              - !Ref IAMRole13
            PolicyName: !Sub "${DynamoDBTable3}RW"

    IAMPolicy10:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"logs:PutMetricFilter\",\"logs:PutRetentionPolicy\"],\"Resource\":[\"*\"]}]}"
            Roles: 
              - !Sub "${IAMRole12}_1705069068762"
            PolicyName: !Sub "${IAMRole12}_1705069068762_1705069074007"

    IAMPolicy11:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": [
                				"dynamodb:PutItem",
                				"dynamodb:GetItem"
                			],
                			"Resource": [
                				"arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}",
                				"arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable2}"
                			]
                		}
                	]
                }
            Roles: 
              - !Ref IAMRole14
            PolicyName: "db"

    IAMPolicy12:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"logs:PutMetricFilter\",\"logs:PutRetentionPolicy\"],\"Resource\":[\"*\"]}]}"
            Roles: 
              - !Ref IAMRole16
            PolicyName: !Sub "${IAMRole16}_1705069074007"

    IAMPolicy13:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: !Sub |
                {
                	"Version": "2012-10-17",
                	"Statement": [
                		{
                			"Sid": "VisualEditor0",
                			"Effect": "Allow",
                			"Action": "dynamo${IAMPolicy11}:*",
                			"Resource": "*"
                		}
                	]
                }
            Roles: 
              - !Sub "${DynamoDBTable3}_requester"
            PolicyName: !Sub "full_dynamo${IAMPolicy11}"

    IAMPolicy14:
        Type: "AWS::IAM::Policy"
        Properties:
            PolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"logs:CreateLogGroup\",\"logs:CreateLogStream\",\"logs:PutLogEvents\",\"logs:PutMetricFilter\",\"logs:PutRetentionPolicy\"],\"Resource\":[\"*\"]}]}"
            Roles: 
              - !Ref IAMRole19
            PolicyName: !Sub "${IAMRole19}_1701362330952"

    SQSQueue:
        Type: "AWS::SQS::Queue"
        Properties:
            DelaySeconds: "0"
            MaximumMessageSize: "262144"
            MessageRetentionPeriod: "345600"
            ReceiveMessageWaitTimeSeconds: "0"
            VisibilityTimeout: "30"
            QueueName: "notifications"

    SQSQueuePolicy:
        Type: "AWS::SQS::QueuePolicy"
        Properties:
            PolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Id\":\"__${IAMPolicy}_policy_ID\",\"Statement\":[{\"Sid\":\"__owner_statement\",\"Effect\":\"Allow\",\"Principal\":{\"AWS\":\"arn:aws:iam::${AWS::AccountId}:root\"},\"Action\":\"SQS:*\",\"Resource\":\"${SQSQueue}\"},{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"sns.amazonaws.com\"},\"Action\":\"sqs:SendMessage\",\"Resource\":\"${SQSQueue}\",\"Condition\":{\"ArnEquals\":{\"aws:SourceArn\":\"arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${LambdaFunction4}\"}}}]}"
            Queues: 
              - !Sub "https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${SQSQueue.QueueName}"
